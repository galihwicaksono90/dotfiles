#+TITLE: Qutebrowser config
#+PROPERTY: header-args :tangle config.py
#+STARTUP: fold
#+OPTIONS: toc:nil 

* Imports
#+begin_src python
import subprocess
import os
#+end_src
* Color Settings
#+begin_src python
# ============================
# Color Settings
# ============================
#+end_src

#+RESULTS:

** Use Colors from Xresources
#+begin_src python
def read_xresources(prefix):
    """
    read settings from xresources
    """
    props = {}
    x = subprocess.run(["xrdb", "-query"], stdout=subprocess.PIPE)
    lines = x.stdout.decode().split("\n")
    for line in filter(lambda l: l.startswith(prefix), lines):
        prop, _, value = line.partition(":\t")
        props[prop] = value
    return props

xresources = read_xresources("*")


#+end_src
** Color Variables :qutebrowser:
Uncomment code block to use color theme
#+begin_src python
# ============================
# Color Scheme
# ============================
#+end_src
#+begin_src python
# black           = '#282828'
# white           = '#ebdbb2'
# blue            = '#458588'
# lightblue       = '#83a598'
# yellow          = '#d79921'
# lightyellow     = '#fabd2f'
# red             = '#cc241d'
# lightred        = '#fb4934'
# green           = '#689d6a'
# lightgreen      = '#b8bb26'
# magenta         = '#b16286'
# lightmagenta    = '#d3869b'
#+end_src
#+begin_src python

black           = xresources["*.color0"]
red             = xresources["*.color1"]
green           = xresources["*.color2"]
yellow          = xresources["*.color3"]
blue            = xresources["*.color4"]
magenta         = xresources["*.color5"]
cyan            = xresources["*.color6"]
white           = xresources["*.color7"]
lightblack      = xresources["*.color8"]
lightred        = xresources["*.color9"]
lightgreen      = xresources["*.color10"]
lightyellow     = xresources["*.color11"]
lightblue       = xresources["*.color12"]
lightmagenta    = xresources["*.color13"]
lightcyan       = xresources["*.color14"]
lightwhite      = xresources["*.color15"]
background      = xresources["*.background"]
foreground      = xresources["*.foreground"]
#+end_src

** Colors
#+begin_src python
c.colors.completion.category.bg = blue
c.colors.completion.category.border.bottom = blue
c.colors.completion.category.border.top = blue
c.colors.completion.category.fg = foreground
c.colors.completion.even.bg =  black
c.colors.completion.fg = [foreground, yellow, foreground]
c.colors.completion.item.selected.bg = yellow
c.colors.completion.item.selected.border.bottom = yellow
c.colors.completion.item.selected.border.top = yellow
c.colors.completion.item.selected.fg = background
c.colors.completion.item.selected.match.fg = foreground
c.colors.completion.match.fg = yellow
c.colors.completion.odd.bg = black
c.colors.completion.scrollbar.bg = black
c.colors.completion.scrollbar.fg = lightwhite
# c.colors.contextmenu.disabled.bg = None
# c.colors.contextmenu.disabled.fg = None
# c.colors.contextmenu.menu.bg = None
# c.colors.contextmenu.menu.fg = None
# c.colors.contextmenu.selected.bg = None
# c.colors.contextmenu.selected.fg = None
c.colors.downloads.bar.bg = background
c.colors.downloads.error.bg = red
c.colors.downloads.error.fg = background
c.colors.downloads.start.bg = green
c.colors.downloads.start.fg = background
c.colors.downloads.stop.bg = blue
c.colors.downloads.stop.fg = background
c.colors.downloads.system.bg = 'none'
c.colors.downloads.system.fg = 'none'
c.colors.hints.bg = lightyellow
c.colors.hints.fg = background
c.colors.hints.match.fg = foreground
c.colors.keyhint.bg = background
c.colors.keyhint.fg = foreground
c.colors.keyhint.suffix.fg = yellow
c.colors.messages.error.bg = red
c.colors.messages.error.border = red
c.colors.messages.error.fg = foreground
c.colors.messages.info.bg = background
c.colors.messages.info.border = background
c.colors.messages.info.fg = foreground
c.colors.messages.warning.bg = yellow
c.colors.messages.warning.border = yellow
c.colors.messages.warning.fg = foreground
c.colors.prompts.bg = background
c.colors.prompts.border = background
c.colors.prompts.fg = foreground
c.colors.prompts.selected.bg = yellow
c.colors.statusbar.caret.bg = magenta
c.colors.statusbar.caret.fg = foreground
c.colors.statusbar.caret.selection.bg = lightmagenta
c.colors.statusbar.caret.selection.fg = foreground
c.colors.statusbar.command.bg = background
c.colors.statusbar.command.fg = foreground
c.colors.statusbar.command.private.bg = background
c.colors.statusbar.command.private.fg = foreground
c.colors.statusbar.insert.bg = blue
c.colors.statusbar.insert.fg = foreground
c.colors.statusbar.normal.bg = background
c.colors.statusbar.normal.fg = foreground
c.colors.statusbar.passthrough.bg = green
c.colors.statusbar.passthrough.fg = foreground
c.colors.statusbar.private.bg = background
c.colors.statusbar.private.fg = yellow
c.colors.statusbar.progress.bg = foreground
c.colors.statusbar.url.error.fg = red
c.colors.statusbar.url.fg = white
c.colors.statusbar.url.hover.fg = yellow
c.colors.statusbar.url.success.http.fg = green
c.colors.statusbar.url.success.https.fg = green
c.colors.statusbar.url.warn.fg = yellow
# c.colors.tabs.indicator.system = 'rgb'
c.colors.tabs.indicator.error = red
c.colors.tabs.indicator.start = yellow
c.colors.tabs.indicator.stop = blue
c.colors.tabs.bar.bg = blue
c.colors.tabs.even.bg = background
c.colors.tabs.even.fg = foreground
c.colors.tabs.odd.bg = background
c.colors.tabs.odd.fg = foreground
c.colors.tabs.pinned.even.bg = background
c.colors.tabs.pinned.even.fg = foreground
c.colors.tabs.pinned.odd.bg = background
c.colors.tabs.pinned.odd.fg = foreground
c.colors.tabs.pinned.selected.even.bg = blue
c.colors.tabs.pinned.selected.even.fg = foreground
c.colors.tabs.pinned.selected.odd.bg = blue
c.colors.tabs.pinned.selected.odd.fg = foreground
c.colors.tabs.selected.even.bg = blue
c.colors.tabs.selected.even.fg = foreground
c.colors.tabs.selected.odd.bg = blue
c.colors.tabs.selected.odd.fg = foreground
# c.colors.webpage.bg = white
# c.colors.webpage.darkmode.algorithm = 'lightness-cielab'
# c.colors.webpage.darkmode.contrast = 0.0
#+end_src

** Render all web contents using a dark theme. Example configurations
## from Chromium's `chrome://flags`:  - "With simple HSL/CIELAB/RGB-based
## inversion": Set   `colors.webpage.darkmode.algorithm` accordingly.  -
## "With selective image inversion": Set
## `colors.webpage.darkmode.policy.images` to `smart`.  - "With selective
## inversion of non-image elements": Set
## `colors.webpage.darkmode.threshold.text` to 150 and
## `colors.webpage.darkmode.threshold.background` to 205.  - "With
## selective inversion of everything": Combines the two variants   above.
## Type: Bool
#+begin_src python
# c.colors.webpage.darkmode.enabled = False
#+end_src

** Render all colors as grayscale. This only has an effect when
## `colors.webpage.darkmode.algorithm` is set to `lightness-hsl` or
## `brightness-rgb`.
## Type: Bool
#+begin_src python
# c.colors.webpage.darkmode.grayscale.all = False
#+end_src

** Desaturation factor for images in dark mode. If set to 0, images are
## left as-is. If set to 1, images are completely grayscale. Values
## between 0 and 1 desaturate the colors accordingly.
## Type: Float
#+begin_src python
# c.colors.webpage.darkmode.grayscale.images = 0.0
#+end_src

** Which images to apply dark mode to. WARNING: On Qt 5.15.0, this
## setting can cause frequent renderer process crashes due to a
## https://codereview.qt-project.org/c/qt/qtwebengine-
## chromium/+/304211[bug in Qt].
## Type: String
## Valid values:
##   - always: Apply dark mode filter to all images.
##   - never: Never apply dark mode filter to any images.
##   - smart: Apply dark mode based on image content.
#+begin_src python
# c.colors.webpage.darkmode.policy.images = 'never'
#+end_src

** Which pages to apply dark mode to.
## Type: String
## Valid values:
##   - always: Apply dark mode filter to all frames, regardless of content.
##   - smart: Apply dark mode filter to frames based on background color.
#+begin_src python
# c.colors.webpage.darkmode.policy.page = 'smart'
#+end_src

** Threshold for inverting background elements with dark mode. Background
## elements with brightness above this threshold will be inverted, and
## below it will be left as in the original, non-dark-mode page. Set to
## 256 to never invert the color or to 0 to always invert it. Note: This
## behavior is the opposite of `colors.webpage.darkmode.threshold.text`!
## Type: Int
#+begin_src python
# c.colors.webpage.darkmode.threshold.background = 0
#+end_src

** Threshold for inverting text with dark mode. Text colors with
## brightness below this threshold will be inverted, and above it will be
## left as in the original, non-dark-mode page. Set to 256 to always
## invert text color or to 0 to never invert text color.
## Type: Int
#+begin_src python
# c.colors.webpage.darkmode.threshold.text = 256
#+end_src

** Force `prefers-color-scheme: dark` colors for websites.
## Type: Bool
#+begin_src python
# c.colors.webpage.prefers_color_scheme_dark = False
#+end_src

* General Settings
#+begin_src python
# ============================
# General Settings
# ============================
#+end_src
** Number of commands to save in the command history. 0: no history / -1:
## unlimited
## Type: Int
#+begin_src python
# c.completion.cmd_history_max_items = 100
#+end_src

** Delay (in milliseconds) before updating completions after typing a
## character.
## Type: Int
#+begin_src python
# c.completion.delay = 0
#+end_src

** Height (in pixels or as percentage of the window) of the completion.
## Type: PercOrInt
#+begin_src python
# c.completion.height = '50%'
#+end_src

** Minimum amount of characters needed to update completions.
## Type: Int
# c.completion.min_chars = 1
## Which categories to show (in which order) in the :open completion.
## Type: FlagList
## Valid values:
##   - searchengines
##   - quickmarks
##   - bookmarks
##   - history
# c.completion.open_categories = ['searchengines', 'quickmarks', 'bookmarks', 'history']
#+begin_src python
c.completion.open_categories = ['quickmarks', 'bookmarks', 'history']
#+end_src

** Move on to the next part when there's only one possible completion
## left.
## Type: Bool
#+begin_src python
# c.completion.quick = True
#+end_src 

** Padding (in pixels) of the scrollbar handle in the completion window.
## Type: Int
#+begin_src python
# c.completion.scrollbar.padding = 2
#+end_src

** Width (in pixels) of the scrollbar in the completion window.
## Type: Int
#+begin_src python
# c.completion.scrollbar.width = 12
#+end_src

** When to show the autocompletion window.
## Type: String
## Valid values:
##   - always: Whenever a completion is available.
##   - auto: Whenever a completion is requested.
##   - never: Never.
#+begin_src python
# c.completion.show = 'always'
#+end_src

** Shrink the completion to be smaller than the configured size if there
## are no scrollbars.
## Type: Bool
#+begin_src python
c.completion.shrink = True
#+end_src

** Format of timestamps (e.g. for the history completion). See
## https://sqlite.org/lang_datefunc.html for allowed substitutions.
## Type: String
#+begin_src python
# c.completion.timestamp_format = '%Y-%m-%d'
#+end_src

** Execute the best-matching command on a partial match.
## Type: Bool
#+begin_src python
# c.completion.use_best_match = False
#+end_src

** A list of patterns which should not be shown in the history. This only
## affects the completion. Matching URLs are still saved in the history
## (and visible on the qute://history page), but hidden in the
## completion. Changing this setting will cause the completion history to
## be regenerated on the next start, which will take a short while.
## Type: List of UrlPattern
#+begin_src python
# c.completion.web_history.exclude = []
#+end_src

** Number of URLs to show in the web history. 0: no history / -1:
## unlimited
## Type: Int
#+begin_src python
# c.completion.web_history.max_items = -1
#+end_src

** Require a confirmation before quitting the application.
## Type: ConfirmQuit
## Valid values:
##   - always: Always show a confirmation.
##   - multiple-tabs: Show a confirmation if multiple tabs are opened.
##   - downloads: Show a confirmation if downloads are running
##   - never: Never show a confirmation.
#+begin_src python
c.confirm_quit = ['downloads']
#+end_src

** Automatically start playing `<video>` elements. Note: On Qt < 5.11,
## this option needs a restart and does not support URL patterns.
## Type: Bool
#+begin_src python
# c.content.autoplay = True
#+end_src

** Enable support for the HTML 5 web application cache feature. An
## application cache acts like an HTTP cache in some sense. For documents
## that use the application cache via JavaScript, the loader engine will
## first ask the application cache for the contents, before hitting the
## network.
## Type: Bool
#+begin_src python
# c.content.cache.appcache = True
#+end_src

** Maximum number of pages to hold in the global memory page cache. The
## page cache allows for a nicer user experience when navigating forth or
## back to pages in the forward/back history, by pausing and resuming up
## to _n_ pages. For more information about the feature, please refer to:
## http://webkit.org/blog/427/webkit-page-cache-i-the-basics/
## Type: Int
#+begin_src python
# c.content.cache.maximum_pages = 0
#+end_src

** Size (in bytes) of the HTTP network cache. Null to use the default
## value. With QtWebEngine, the maximum supported value is 2147483647 (~2
## GB).
## Type: Int
#+begin_src python
# c.content.cache.size = None
#+end_src

** Allow websites to read canvas elements. Note this is needed for some
## websites to work properly.
## Type: Bool
#+begin_src python
# c.content.canvas_reading = True
#+end_src

** Which cookies to accept. With QtWebEngine, this setting also controls
## other features with tracking capabilities similar to those of cookies;
## including IndexedDB, DOM storage, filesystem API, service workers, and
## AppCache. Note that with QtWebKit, only `all` and `never` are
## supported as per-domain values. Setting `no-3rdparty` or `no-
## unknown-3rdparty` per-domain on QtWebKit will have the same effect as
## `all`. If this setting is used with URL patterns, the pattern gets
## applied to the origin/first party URL of the page making the request,
## not the request URL.
## Type: String
## Valid values:
##   - all: Accept all cookies.
##   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
##   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
##   - never: Don't accept cookies at all.
#+begin_src python
# c.content.cookies.accept = 'all'
#+end_src

** Store cookies. Note this option needs a restart with QtWebEngine on Qt
## < 5.9.
## Type: Bool
#+begin_src python
# c.content.cookies.store = True
#+end_src

** Default encoding to use for websites. The encoding must be a string
## describing an encoding such as _utf-8_, _iso-8859-1_, etc.
## Type: String
#+begin_src python
# c.content.default_encoding = 'iso-8859-1'
#+end_src

** Allow websites to share screen content. On Qt < 5.10, a dialog box is
## always displayed, even if this is set to "true".
## Type: BoolAsk
## Valid values:
##   - true
##   - false
##   - ask
#+begin_src python
# c.content.desktop_capture = 'ask'
#+end_src

** Try to pre-fetch DNS entries to speed up browsing.
## Type: Bool
#+begin_src python
# c.content.dns_prefetch = True
#+end_src

** Expand each subframe to its contents. This will flatten all the frames
## to become one scrollable page.
## Type: Bool
#+begin_src python
# c.content.frame_flattening = False
#+end_src

** Set fullscreen notification overlay timeout in milliseconds. If set to
## 0, no overlay will be displayed.
## Type: Int
#+begin_src python
# c.content.fullscreen.overlay_timeout = 3000
#+end_src

** Limit fullscreen to the browser window (does not expand to fill the
## screen).
## Type: Bool
#+begin_src python
# c.content.fullscreen.window = False
#+end_src

** Allow websites to request geolocations.
## Type: BoolAsk
## Valid values:
##   - true
##   - false
##   - ask
#+begin_src python
# c.content.geolocation = 'ask'
#+end_src

** Value to send in the `Accept-Language` header. Note that the value
## read from JavaScript is always the global value.
## Type: String
#+begin_src python
# c.content.headers.accept_language = 'en-US,en;q=0.9'
#+end_src

** Custom headers for qutebrowser HTTP requests.
## Type: Dict
#+begin_src python
# c.content.headers.custom = {}
#+end_src

** Value to send in the `DNT` header. When this is set to true,
## qutebrowser asks websites to not track your identity. If set to null,
## the DNT header is not sent at all.
## Type: Bool
#+begin_src python
# c.content.headers.do_not_track = True
#+end_src

** When to send the Referer header. The Referer header tells websites
## from which website you were coming from when visiting them. No restart
## is needed with QtWebKit.
## Type: String
## Valid values:
##   - always: Always send the Referer.
##   - never: Never send the Referer. This is not recommended, as some sites may break.
##   - same-domain: Only send the Referer for the same domain. This will still protect your privacy, but shouldn't break any sites. With QtWebEngine, the referer will still be sent for other domains, but with stripped path information.
#+begin_src python
# c.content.headers.referer = 'same-domain'
#+end_src

** User agent to send.  The following placeholders are defined:  *
## `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
## The underlying WebKit version (set to a fixed value   with
## QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
## QtWebEngine. * `{qt_version}`: The underlying Qt version. *
## `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
## QtWebEngine. * `{upstream_browser_version}`: The corresponding
## Safari/Chrome version. * `{qutebrowser_version}`: The currently
## running qutebrowser version.  The default value is equal to the
## unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
## read from JavaScript is always the global value. With QtWebEngine
## between 5.12 and 5.14 (inclusive), changing the value exposed to
## JavaScript requires a restart.
## Type: FormatString
#+begin_src python
# c.content.headers.user_agent = 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {qt_key}/{qt_version} {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}'
#+end_src

** Enable host blocking.
## Type: Bool
#+begin_src python
# c.content.host_blocking.enabled = True
#+end_src

** List of URLs of lists which contain hosts to block.  The file can be
## in one of the following formats:  - An `/etc/hosts`-like file - One
## host per line - A zip-file of any of the above, with either only one
## file, or a file   named `hosts` (with any extension).  It's also
## possible to add a local file or directory via a `file://` URL. In case
## of a directory, all files in the directory are read as adblock lists.
## The file `~/.config/qutebrowser/blocked-hosts` is always read if it
## exists.
## Type: List of Url
#+begin_src python
# c.content.blocking.method = "adblock"
c.content.blocking.adblock.lists = [
    "https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts"
]
#+end_src

#+RESULTS:


** A list of patterns that should always be loaded, despite being ad-
## blocked. Note this whitelists blocked hosts, not first-party URLs. As
## an example, if `example.org` loads an ad from `ads.example.org`, the
## whitelisted host should be `ads.example.org`. If you want to disable
## the adblocker on a given page, use the `content.host_blocking.enabled`
## setting with a URL pattern instead. Local domains are always exempt
## from hostblocking.
## Type: List of UrlPattern
#+begin_src python
# c.content.host_blocking.whitelist = []
#+end_src

** Enable hyperlink auditing (`<a ping>`).
## Type: Bool
#+begin_src python
# c.content.hyperlink_auditing = False
#+end_src

** Load images automatically in web pages.
## Type: Bool
#+begin_src python
# c.content.images = True
#+end_src

** Show javascript alerts.
## Type: Bool
#+begin_src python
# c.content.javascript.alert = True
#+end_src

** Allow JavaScript to read from or write to the clipboard. With
## QtWebEngine, writing the clipboard as response to a user interaction
## is always allowed.
## Type: Bool
#+begin_src python
# c.content.javascript.can_access_clipboard = False
#+end_src

** Allow JavaScript to close tabs.
## Type: Bool
#+begin_src python
# c.content.javascript.can_close_tabs = False
#+end_src

** Allow JavaScript to open new tabs without user interaction.
## Type: Bool
#+begin_src python
# c.content.javascript.can_open_tabs_automatically = False
#+end_src

** Enable JavaScript.
## Type: Bool
#+begin_src python
# c.content.javascript.enabled = True
#+end_src

** Log levels to use for JavaScript console logging messages. When a
## JavaScript message with the level given in the dictionary key is
## logged, the corresponding dictionary value selects the qutebrowser
## logger to use. On QtWebKit, the "unknown" setting is always used. The
## following levels are valid: `none`, `debug`, `info`, `warning`,
## `error`.
## Type: Dict
#+begin_src python
# c.content.javascript.log = {'unknown': 'debug', 'info': 'debug', 'warning': 'debug', 'error': 'debug'}
#+end_src

** Use the standard JavaScript modal dialog for `alert()` and
## `confirm()`.
## Type: Bool
#+begin_src python
# c.content.javascript.modal_dialog = False
#+end_src

** Show javascript prompts.
## Type: Bool
#+begin_src python
# c.content.javascript.prompt = True
#+end_src

** Allow locally loaded documents to access other local URLs.
## Type: Bool
#+begin_src python
# c.content.local_content_can_access_file_urls = True
#+end_src

** Allow locally loaded documents to access remote URLs.
## Type: Bool
#+begin_src python
# c.content.local_content_can_access_remote_urls = False
#+end_src

** Enable support for HTML 5 local storage and Web SQL.
## Type: Bool
#+begin_src python
# c.content.local_storage = True
#+end_src

** Allow websites to record audio/video.
## Type: BoolAsk
## Valid values:
##   - true
##   - false
##   - ask
#+begin_src python
# c.content.media_capture = 'ask'
#+end_src

** Allow websites to lock your mouse pointer.
## Type: BoolAsk
## Valid values:
##   - true
##   - false
##   - ask
#+begin_src python
# c.content.mouse_lock = 'ask'
#+end_src

** Automatically mute tabs. Note that if the `:tab-mute` command is used,
## the mute status for the affected tab is now controlled manually, and
## this setting doesn't have any effect.
## Type: Bool
#+begin_src python
# c.content.mute = False
#+end_src

** Netrc-file for HTTP authentication. If unset, `~/.netrc` is used.
## Type: File
#+begin_src python
# c.content.netrc_file = None
#+end_src

** Allow websites to show notifications.
## Type: BoolAsk
## Valid values:
##   - true
##   - false
##   - ask
#+begin_src python
# c.content.notifications = 'ask'
#+end_src

** Allow pdf.js to view PDF files in the browser. Note that the files can
## still be downloaded by clicking the download button in the pdf.js
## viewer.
## Type: Bool
#+begin_src python
# c.content.pdfjs = False
#+end_src

** Allow websites to request persistent storage quota via
## `navigator.webkitPersistentStorage.requestQuota`.
## Type: BoolAsk
## Valid values:
##   - true
##   - false
##   - ask
#+begin_src python
# c.content.persistent_storage = 'ask'
#+end_src

** Enable plugins in Web pages.
## Type: Bool
#+begin_src python
# c.content.plugins = False
#+end_src

** Draw the background color and images also when the page is printed.
## Type: Bool
#+begin_src python
# c.content.print_element_backgrounds = True
#+end_src

** Open new windows in private browsing mode which does not record
## visited pages.
## Type: Bool
#+begin_src python
# c.content.private_browsing = False
#+end_src

** Proxy to use. In addition to the listed values, you can use a
## `socks://...` or `http://...` URL. Note that with QtWebEngine, it will
## take a couple of seconds until the change is applied, if this value is
## changed at runtime.
## Type: Proxy
## Valid values:
##   - system: Use the system wide proxy.
##   - none: Don't use any proxy
#+begin_src python
# c.content.proxy = 'system'
#+end_src

** Send DNS requests over the configured proxy.
## Type: Bool
#+begin_src python
# c.content.proxy_dns_requests = True
#+end_src

** Allow websites to register protocol handlers via
## `navigator.registerProtocolHandler`.
## Type: BoolAsk
## Valid values:
##   - true
##   - false
##   - ask
#+begin_src python
# c.content.register_protocol_handler = 'ask'
#+end_src

** Enable quirks (such as faked user agent headers) needed to get
## specific sites to work properly.
## Type: Bool
#+begin_src python
# c.content.site_specific_quirks = True
#+end_src

** Validate SSL handshakes.
## Type: BoolAsk
## Valid values:
##   - true
##   - false
##   - ask
#+begin_src python
# c.content.ssl_strict = 'ask'
#+end_src

** How navigation requests to URLs with unknown schemes are handled.
## Type: String
## Valid values:
##   - disallow: Disallows all navigation requests to URLs with unknown schemes.
##   - allow-from-user-interaction: Allows navigation requests to URLs with unknown schemes that are issued from user-interaction (like a mouse-click), whereas other navigation requests (for example from JavaScript) are suppressed.
##   - allow-all: Allows all navigation requests to URLs with unknown schemes.
#+begin_src python
# c.content.unknown_url_scheme_policy = 'allow-from-user-interaction'
#+end_src

** List of user stylesheet filenames to use.
## Type: List of File, or File
#+begin_src python
# c.content.user_stylesheets = []
#+end_src

** Enable WebGL.
## Type: Bool
#+begin_src python
# c.content.webgl = True
#+end_src

** Which interfaces to expose via WebRTC. On Qt 5.10, this option doesn't
## work because of a Qt bug.
## Type: String
## Valid values:
##   - all-interfaces: WebRTC has the right to enumerate all interfaces and bind them to discover public interfaces.
##   - default-public-and-private-interfaces: WebRTC should only use the default route used by http. This also exposes the associated default private address. Default route is the route chosen by the OS on a multi-homed endpoint.
##   - default-public-interface-only: WebRTC should only use the default route used by http. This doesn't expose any local addresses.
##   - disable-non-proxied-udp: WebRTC should only use TCP to contact peers or servers unless the proxy server supports UDP. This doesn't expose any local addresses either.
#+begin_src python
# c.content.webrtc_ip_handling_policy = 'all-interfaces'
#+end_src

** Monitor load requests for cross-site scripting attempts. Suspicious
## scripts will be blocked and reported in the devtools JavaScript
## console. Note that bypasses for the XSS auditor are widely known and
## it can be abused for cross-site info leaks in some scenarios, see:
## https://www.chromium.org/developers/design-documents/xss-auditor
## Type: Bool
#+begin_src python
# c.content.xss_auditing = False
#+end_src

** Directory to save downloads to. If unset, a sensible OS-specific
## default is used.
## Type: Directory
#+begin_src python
c.downloads.location.directory = '/home/tony/Storage/Downloads/'
#+end_src

** Prompt the user for the download location. If set to false,
## `downloads.location.directory` will be used.
## Type: Bool
#+begin_src python
# c.downloads.location.prompt = True
#+end_src

** Remember the last used download directory.
## Type: Bool
#+begin_src python
# c.downloads.location.remember = True
#+end_src

** What to display in the download filename input.
## Type: String
## Valid values:
##   - path: Show only the download path.
##   - filename: Show only download filename.
##   - both: Show download path and filename.
#+begin_src python
# c.downloads.location.suggestion = 'path'
#+end_src

** Default program used to open downloads. If null, the default internal
## handler is used. Any `{}` in the string will be expanded to the
## filename, else the filename will be appended.
## Type: String
#+begin_src python
# c.downloads.open_dispatcher = None
#+end_src

** Where to show the downloaded files.
## Type: VerticalPosition
## Valid values:
##   - top
##   - bottom
#+begin_src python
c.downloads.position = 'bottom'
#+end_src

** Duration (in milliseconds) to wait before removing finished downloads.
## If set to -1, downloads are never removed.
## Type: Int
#+begin_src python
# c.downloads.remove_finished = -1
#+end_src

** Editor (and arguments) to use for the `open-editor` command. The
## following placeholders are defined:  * `{file}`: Filename of the file
## to be edited. * `{line}`: Line in which the caret is found in the
## text. * `{column}`: Column in which the caret is found in the text. *
## `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
## Same as `{column}`, but starting from index 0.
## Type: ShellCommand
#+begin_src python
# c.editor.command = ['nvim', '{file}' ]
# c.editor.command = ['nvim', '-f', '{file}', '-c', 'normal {line}G{column0}l']
#+end_src
* Fonts Settings
#+begin_src python
# ============================
# Fonts Settings
# ============================
#+end_src
** Font used in the completion categories.
## Type: Font
#+begin_src python
# c.fonts.completion.category = 'bold default_size default_family'
#+end_src

** Font used in the completion widget.
## Type: Font
#+begin_src python
# c.fonts.completion.entry = 'default_size default_family'
#+end_src

** Font used for the context menu. If set to null, the Qt default is
## used.
## Type: Font
#+begin_src python
# c.fonts.contextmenu = 'default-size default-family'
#+end_src

** Font used for the debugging console.
## Type: Font
#+begin_src python
# c.fonts.debug_console = 'default_size default_family'
#+end_src

** Default font families to use. Whenever "default_family" is used in a
## font setting, it's replaced with the fonts listed here. If set to an
## empty value, a system-specific monospace default is used.
## Type: List of Font, or Font
#+begin_src python
c.fonts.default_family = ["Open Sans"]
#+end_src

** Default font size to use. Whenever "default_size" is used in a font
## setting, it's replaced with the size listed here. Valid values are
## either a float value with a "pt" suffix, or an integer value with a
## "px" suffix.
## Type: String
#+begin_src python
c.fonts.default_size = '10pt'
#+end_src

** Font used for the downloadbar.
## Type: Font
#+begin_src python
# c.fonts.downloads = 'default_size default_family'
#+end_src

** Font used for the hints.
## Type: Font
#+begin_src python
c.fonts.hints = 'bold 13px default_family'
#+end_src

** Font used in the keyhint widget.
## Type: Font
#+begin_src python
# c.fonts.keyhint = 'default_size default_family'
#+end_src

** Font used for error messages.
## Type: Font
#+begin_src 
# c.fonts.messages.error = 'default_size default_family'
#+end_src

** Font used for info messages.
## Type: Font
#+begin_src python
# c.fonts.messages.info = 'default_size default_family'
#+end_src

** Font used for warning messages.
## Type: Font
#+begin_src python
# c.fonts.messages.warning = 'default_size default_family'
#+end_src

** Font used for prompts.
## Type: Font
#+begin_src python
# c.fonts.prompts = 'default_size sans-serif'
#+end_src

** Font used in the statusbar.
## Type: Font
#+begin_src python
# c.fonts.statusbar = 'default_size default_family'
#+end_src

** Font used for selected tabs.
## Type: Font
#+begin_src python
# c.fonts.tabs.selected = 'default_size default_family'
#+end_src

** Font used for unselected tabs.
## Type: Font
#+begin_src python
# c.fonts.tabs.unselected = 'default_size default_family'
#+end_src

#+RESULTS:

** Font family for cursive fonts.
## Type: FontFamily
#+begin_src python
# c.fonts.web.family.cursive = ''
#+end_src

** Font family for fantasy fonts.
## Type: FontFamily
#+begin_src python
# c.fonts.web.family.fantasy = ''
#+end_src

** Font family for fixed fonts.
## Type: FontFamily
#+begin_src python
# c.fonts.web.family.fixed = ''
#+end_src

** Font family for sans-serif fonts.
## Type: FontFamily
#+begin_src python
c.fonts.web.family.sans_serif = 'Noto Sans'
#+end_src

** Font family for serif fonts.
## Type: FontFamily
#+begin_src python
# c.fonts.web.family.serif = ''
#+end_src

** Font family for standard fonts.
## Type: FontFamily
#+begin_src python
c.fonts.web.family.standard = 'Open Sans'
#+end_src

** Default font size (in pixels) for regular text.
## Type: Int
#+begin_src python
c.fonts.web.size.default = 15
#+end_src

** Default font size (in pixels) for fixed-pitch text.
## Type: Int
#+begin_src python
c.fonts.web.size.default_fixed = 14
#+end_src

** Hard minimum font size (in pixels).
## Type: Int
#+begin_src python
# c.fonts.web.size.minimum = 0
#+end_src

** Minimum logical font size (in pixels) that is applied when zooming
## out.
## Type: Int
#+begin_src python
# c.fonts.web.size.minimum_logical = 6
#+end_src
* Browser Settings
#+begin_src python
# ============================
# Browser Settings
# ============================
#+end_src
** When a hint can be automatically followed without pressing Enter.
## Type: String
## Valid values:
##   - always: Auto-follow whenever there is only a single hint on a page.
##   - unique-match: Auto-follow whenever there is a unique non-empty match in either the hint string (word mode) or filter (number mode).
##   - full-match: Follow the hint when the user typed the whole hint (letter, word or number mode) or the element's text (only in number mode).
##   - never: The user will always need to press Enter to follow a hint.
#+begin_src python
# c.hints.auto_follow = 'unique-match'
#+end_src

** Duration (in milliseconds) to ignore normal-mode key bindings after a
## successful auto-follow.
## Type: Int
#+begin_src python
# c.hints.auto_follow_timeout = 0
#+end_src

** CSS border value for hints.
## Type: String
#+begin_src python
c.hints.border = '0px solid #E3BE23'
#+end_src

** Characters used for hint strings.
## Type: UniqueCharString
#+begin_src python
c.hints.chars = 'asdfghjkl'
#+end_src

** Dictionary file to be used by the word hints.
## Type: File
#+begin_src python
# c.hints.dictionary = '/usr/share/dict/words'
#+end_src

** Which implementation to use to find elements to hint.
## Type: String
## Valid values:
##   - javascript: Better but slower
##   - python: Slightly worse but faster
#+begin_src python
# c.hints.find_implementation = 'python'
#+end_src

** Hide unmatched hints in rapid mode.
## Type: Bool
#+begin_src python
# c.hints.hide_unmatched_rapid_hints = True
#+end_src

** Leave hint mode when starting a new page load.
## Type: Bool
#+begin_src python
# c.hints.leave_on_load = True
#+end_src

** Minimum number of characters used for hint strings.
## Type: Int
#+begin_src python
# c.hints.min_chars = 1
#+end_src

** Mode to use for hints.
## Type: String
## Valid values:
##   - number: Use numeric hints. (In this mode you can also type letters from the hinted element to filter and reduce the number of elements that are hinted.)
##   - letter: Use the characters in the `hints.chars` setting.
##   - word: Use hints words based on the html elements and the extra words.
#+begin_src python
# c.hints.mode = 'letter'
#+end_src

** Comma-separated list of regular expressions to use for 'next' links.
## Type: List of Regex
#+begin_src python
# c.hints.next_regexes = ['\\bnext\\b', '\\bmore\\b', '\\bnewer\\b', '\\b[>→≫]\\b', '\\b(>>|»)\\b', '\\bcontinue\\b']
#+end_src

** Padding (in pixels) for hints.
## Type: Padding
#+begin_src python
# c.hints.padding = {'top': 0, 'bottom': 0, 'left': 3, 'right': 3}
#+end_src

** Comma-separated list of regular expressions to use for 'prev' links.
## Type: List of Regex
#+begin_src python
# c.hints.prev_regexes = ['\\bprev(ious)?\\b', '\\bback\\b', '\\bolder\\b', '\\b[<←≪]\\b', '\\b(<<|«)\\b']
#+end_src

** Rounding radius (in pixels) for the edges of hints.
## Type: Int
#+begin_src python
c.hints.radius = 0
#+end_src

** Scatter hint key chains (like Vimium) or not (like dwb). Ignored for
## number hints.
## Type: Bool
#+begin_src python
# c.hints.scatter = True
#+end_src

** CSS selectors used to determine which elements on a page should have
## hints.
## Type: Dict
#+begin_src python
# c.hints.selectors = {'all': ['a', 'area', 'textarea', 'select', 'input:not([type="hidden"])', 'button', 'frame', 'iframe', 'img', 'link', 'summary', '[onclick]', '[onmousedown]', '[role="link"]', '[role="option"]', '[role="button"]', '[ng-click]', '[ngClick]', '[data-ng-click]', '[x-ng-click]', '[tabindex]'], 'links': ['a[href]', 'area[href]', 'link[href]', '[role="link"][href]'], 'images': ['img'], 'media': ['audio', 'img', 'video'], 'url': ['[src]', '[href]'], 'inputs': ['input[type="text"]', 'input[type="date"]', 'input[type="datetime-local"]', 'input[type="email"]', 'input[type="month"]', 'input[type="number"]', 'input[type="password"]', 'input[type="search"]', 'input[type="tel"]', 'input[type="time"]', 'input[type="url"]', 'input[type="week"]', 'input:not([type])', 'textarea']}
#+end_src

** Make characters in hint strings uppercase.
## Type: Bool
#+begin_src python
# c.hints.uppercase = False
#+end_src

** Maximum time (in minutes) between two history items for them to be
## considered being from the same browsing session. Items with less time
## between them are grouped when being displayed in `:history`. Use -1 to
## disable separation.
## Type: Int
#+begin_src python
# c.history_gap_interval = 30
#+end_src

** Allow Escape to quit the crash reporter.
## Type: Bool
#+begin_src python
# c.input.escape_quits_reporter = True
#+end_src

** Which unbound keys to forward to the webview in normal mode.
## Type: String
## Valid values:
##   - all: Forward all unbound keys.
##   - auto: Forward unbound non-alphanumeric keys.
##   - none: Don't forward any keys.
#+begin_src python
# c.input.forward_unbound_keys = 'auto'
#+end_src

** Enter insert mode if an editable element is clicked.
## Type: Bool
#+begin_src python
# c.input.insert_mode.auto_enter = True
#+end_src

** Leave insert mode if a non-editable element is clicked.
## Type: Bool
#+begin_src python
# c.input.insert_mode.auto_leave = True
#+end_src

** Automatically enter insert mode if an editable element is focused
## after loading the page.
## Type: Bool
#+begin_src python
# c.input.insert_mode.auto_load = False
#+end_src

** Leave insert mode when starting a new page load. Patterns may be
## unreliable on this setting, and they may match the url you are
## navigating to, or the URL you are navigating from.
## Type: Bool
#+begin_src python
# c.input.insert_mode.leave_on_load = True
#+end_src

** Switch to insert mode when clicking flash and other plugins.
## Type: Bool
#+begin_src python
# c.input.insert_mode.plugins = False
#+end_src

** Include hyperlinks in the keyboard focus chain when tabbing.
## Type: Bool
#+begin_src python
# c.input.links_included_in_focus_chain = True
#+end_src

** Enable back and forward buttons on the mouse.
## Type: Bool
#+begin_src python
# c.input.mouse.back_forward_buttons = True
#+end_src

** Enable Opera-like mouse rocker gestures. This disables the context
## menu.
## Type: Bool
#+begin_src python
# c.input.mouse.rocker_gestures = False
#+end_src

** Timeout (in milliseconds) for partially typed key bindings. If the
## current input forms only partial matches, the keystring will be
## cleared after this time.
## Type: Int
#+begin_src python
# c.input.partial_timeout = 5000
#+end_src

** Enable spatial navigation. Spatial navigation consists in the ability
## to navigate between focusable elements in a Web page, such as
## hyperlinks and form controls, by using Left, Right, Up and Down arrow
## keys. For example, if the user presses the Right key, heuristics
## determine whether there is an element he might be trying to reach
## towards the right and which element he probably wants.
## Type: Bool
#+begin_src python
# c.input.spatial_navigation = False
#+end_src

** Keychains that shouldn't be shown in the keyhint dialog. Globs are
## supported, so `;*` will blacklist all keychains starting with `;`. Use
## `*` to disable keyhints.
## Type: List of String
#+begin_src python
# c.keyhint.blacklist = []
#+end_src

** Time (in milliseconds) from pressing a key to seeing the keyhint
## dialog.
## Type: Int
#+begin_src python
c.keyhint.delay = 100
#+end_src

** Rounding radius (in pixels) for the edges of the keyhint dialog.
## Type: Int
#+begin_src python
c.keyhint.radius = 0
#+end_src

** Level for console (stdout/stderr) logs. Ignored if the `--loglevel` or
## `--debug` CLI flags are used.
## Type: LogLevel
## Valid values:
##   - vdebug
##   - debug
##   - info
##   - warning
##   - error
##   - critical
#+begin_src python
# c.logging.level.console = 'info'
#+end_src

** Level for in-memory logs.
## Type: LogLevel
## Valid values:
##   - vdebug
##   - debug
##   - info
##   - warning
##   - error
##   - critical
#+begin_src python
# c.logging.level.ram = 'debug'
#+end_src

** Duration (in milliseconds) to show messages in the statusbar for. Set
## to 0 to never clear messages.
## Type: Int
#+begin_src python
c.messages.timeout = 3000
#+end_src

** How to open links in an existing instance if a new one is launched.
## This happens when e.g. opening a link from a terminal. See
## `new_instance_open_target_window` to customize in which window the
## link is opened in.
## Type: String
## Valid values:
##   - tab: Open a new tab in the existing window and activate the window.
##   - tab-bg: Open a new background tab in the existing window and activate the window.
##   - tab-silent: Open a new tab in the existing window without activating the window.
##   - tab-bg-silent: Open a new background tab in the existing window without activating the window.
##   - window: Open in a new window.
#+begin_src python
# c.new_instance_open_target = 'tab'
#+end_src

** Which window to choose when opening links as new tabs. When
## `new_instance_open_target` is set to `window`, this is ignored.
## Type: String
## Valid values:
##   - first-opened: Open new tabs in the first (oldest) opened window.
##   - last-opened: Open new tabs in the last (newest) opened window.
##   - last-focused: Open new tabs in the most recently focused window.
##   - last-visible: Open new tabs in the most recently visible window.
#+begin_src python
# c.new_instance_open_target_window = 'last-focused'
#+end_src

** Show a filebrowser in download prompts.
## Type: Bool
#+begin_src python
# c.prompt.filebrowser = True
#+end_src

** Rounding radius (in pixels) for the edges of prompts.
## Type: Int
#+begin_src python
c.prompt.radius = 0
#+end_src

** Additional arguments to pass to Qt, without leading `--`. With
## QtWebEngine, some Chromium arguments (see
## https://peter.sh/experiments/chromium-command-line-switches/ for a
## list) will work.
## Type: List of String
#+begin_src python
# c.qt.args = []
#+end_src

** Force a Qt platform to use. This sets the `QT_QPA_PLATFORM`
## environment variable and is useful to force using the XCB plugin when
## running QtWebEngine on Wayland.
## Type: String
#+begin_src python
# c.qt.force_platform = None
#+end_src

** Force a Qt platformtheme to use. This sets the `QT_QPA_PLATFORMTHEME`
## environment variable which controls dialogs like the filepicker. By
## default, Qt determines the platform theme based on the desktop
## environment.
## Type: String
#+begin_src python
# c.qt.force_platformtheme = None
#+end_src

** Force software rendering for QtWebEngine. This is needed for
## QtWebEngine to work with Nouveau drivers and can be useful in other
## scenarios related to graphic issues.
## Type: String
## Valid values:
##   - software-opengl: Tell LibGL to use a software implementation of GL (`LIBGL_ALWAYS_SOFTWARE` / `QT_XCB_FORCE_SOFTWARE_OPENGL`)
##   - qt-quick: Tell Qt Quick to use a software renderer instead of OpenGL. (`QT_QUICK_BACKEND=software`)
##   - chromium: Tell Chromium to disable GPU support and use Skia software rendering instead. (`--disable-gpu`)
##   - none: Don't force software rendering.
#+begin_src python
# c.qt.force_software_rendering = 'none'
#+end_src

** Turn on Qt HighDPI scaling. This is equivalent to setting
## QT_AUTO_SCREEN_SCALE_FACTOR=1 or QT_ENABLE_HIGHDPI_SCALING=1 (Qt >=
## 5.14) in the environment. It's off by default as it can cause issues
## with some bitmap fonts. As an alternative to this, it's possible to
## set font sizes and the `zoom.default` setting.
## Type: Bool
#+begin_src python
# c.qt.highdpi = False
#+end_src

** When to use Chromium's low-end device mode. This improves the RAM
## usage of renderer processes, at the expense of performance.
## Type: String
## Valid values:
##   - always: Always use low-end device mode.
##   - auto: Decide automatically (uses low-end mode with < 1 GB available RAM).
##   - never: Never use low-end device mode.
#+begin_src python
# c.qt.low_end_device_mode = 'auto'
#+end_src

** Which Chromium process model to use. Alternative process models use
## less resources, but decrease security and robustness. See the
## following pages for more details:    -
## https://www.chromium.org/developers/design-documents/process-models
## - https://doc.qt.io/qt-5/qtwebengine-features.html#process-models
## Type: String
## Valid values:
##   - process-per-site-instance: Pages from separate sites are put into separate processes and separate visits to the same site are also isolated.
##   - process-per-site: Pages from separate sites are put into separate processes. Unlike Process per Site Instance, all visits to the same site will share an OS process. The benefit of this model is reduced memory consumption, because more web pages will share processes. The drawbacks include reduced security, robustness, and responsiveness.
##   - single-process: Run all tabs in a single process. This should be used for debugging purposes only, and it disables `:open --private`.
#+begin_src python
# c.qt.process_model = 'process-per-site-instance'
#+end_src

** When/how to show the scrollbar.
## Type: String
## Valid values:
##   - always: Always show the scrollbar.
##   - never: Never show the scrollbar.
##   - when-searching: Show the scrollbar when searching for text in the webpage. With the QtWebKit backend, this is equal to `never`.
##   - overlay: Show an overlay scrollbar. With Qt < 5.11 or on macOS, this is unavailable and equal to `when-searching`; with the QtWebKit backend, this is equal to `never`. Enabling/disabling overlay scrollbars requires a restart.
#+begin_src python
# c.scrolling.bar = 'overlay'
#+end_src

** Enable smooth scrolling for web pages. Note smooth scrolling does not
## work with the `:scroll-px` command.
## Type: Bool
#+begin_src python
# c.scrolling.smooth = True
#+end_src

** When to find text on a page case-insensitively.
## Type: IgnoreCase
## Valid values:
##   - always: Search case-insensitively.
##   - never: Search case-sensitively.
##   - smart: Search case-sensitively if there are capital characters.
#+begin_src python
# c.search.ignore_case = 'smart'
#+end_src

** Find text on a page incrementally, renewing the search for each typed
## character.
## Type: Bool
#+begin_src python
# c.search.incremental = True
#+end_src

** Wrap around at the top and bottom of the page when advancing through
## text matches using `:search-next` and `:search-prev`.
## Type: Bool
#+begin_src python
# c.search.wrap = True
#+end_src

** Name of the session to save by default. If this is set to null, the
## session which was last loaded is saved.
## Type: SessionName
#+begin_src python
# c.session.default_name = None
#+end_src

** Load a restored tab as soon as it takes focus.
## Type: Bool
#+begin_src python
# c.session.lazy_restore = False
#+end_src

** Languages to use for spell checking. You can check for available
## languages and install dictionaries using scripts/dictcli.py. Run the
## script with -h/--help for instructions.
## Type: List of String
## Valid values:
##   - af-ZA: Afrikaans (South Africa)
##   - bg-BG: Bulgarian (Bulgaria)
##   - ca-ES: Catalan (Spain)
##   - cs-CZ: Czech (Czech Republic)
##   - da-DK: Danish (Denmark)
##   - de-DE: German (Germany)
##   - el-GR: Greek (Greece)
##   - en-AU: English (Australia)
##   - en-CA: English (Canada)
##   - en-GB: English (United Kingdom)
##   - en-US: English (United States)
##   - es-ES: Spanish (Spain)
##   - et-EE: Estonian (Estonia)
##   - fa-IR: Farsi (Iran)
##   - fo-FO: Faroese (Faroe Islands)
##   - fr-FR: French (France)
##   - he-IL: Hebrew (Israel)
##   - hi-IN: Hindi (India)
##   - hr-HR: Croatian (Croatia)
##   - hu-HU: Hungarian (Hungary)
##   - id-ID: Indonesian (Indonesia)
##   - it-IT: Italian (Italy)
##   - ko: Korean
##   - lt-LT: Lithuanian (Lithuania)
##   - lv-LV: Latvian (Latvia)
##   - nb-NO: Norwegian (Norway)
##   - nl-NL: Dutch (Netherlands)
##   - pl-PL: Polish (Poland)
##   - pt-BR: Portuguese (Brazil)
##   - pt-PT: Portuguese (Portugal)
##   - ro-RO: Romanian (Romania)
##   - ru-RU: Russian (Russia)
##   - sh: Serbo-Croatian
##   - sk-SK: Slovak (Slovakia)
##   - sl-SI: Slovenian (Slovenia)
##   - sq: Albanian
##   - sr: Serbian
##   - sv-SE: Swedish (Sweden)
##   - ta-IN: Tamil (India)
##   - tg-TG: Tajik (Tajikistan)
##   - tr-TR: Turkish (Turkey)
##   - uk-UA: Ukrainian (Ukraine)
##   - vi-VN: Vietnamese (Viet Nam)
#+begin_src python
# c.spellcheck.languages = []
#+end_src

** Padding (in pixels) for the statusbar.
## Type: Padding
#+begin_src python
# c.statusbar.padding = {'top': 1, 'bottom': 1, 'left': 0, 'right': 0}
#+end_src

** Position of the status bar.
## Type: VerticalPosition
## Valid values:
##   - top
##   - bottom
#+begin_src python
# c.statusbar.position = 'bottom'
#+end_src

** When to show the statusbar.
## Type: String
## Valid values:
##   - always: Always show the statusbar.
##   - never: Always hide the statusbar.
##   - in-mode: Show the statusbar when in modes other than normal mode.
#+begin_src python
c.statusbar.show = 'always'
#+end_src

** List of widgets displayed in the statusbar.
## Type: List of String
## Valid values:
##   - url: Current page URL.
##   - scroll: Percentage of the current page position like `10%`.
##   - scroll_raw: Raw percentage of the current page position like `10`.
##   - history: Display an arrow when possible to go back/forward in history.
##   - tabs: Current active tab, e.g. `2`.
##   - keypress: Display pressed keys when composing a vi command.
##   - progress: Progress bar for the current page loading.
#+begin_src python
# c.statusbar.widgets = ['keypress', 'url', 'scroll', 'history', 'tabs', 'progress']
#+end_src

** Open new tabs (middleclick/ctrl+click) in the background.
## Type: Bool
#+begin_src python
# c.tabs.background = False
#+end_src

** Mouse button with which to close tabs.
## Type: String
## Valid values:
##   - right: Close tabs on right-click.
##   - middle: Close tabs on middle-click.
##   - none: Don't close tabs using the mouse.
#+begin_src python
# c.tabs.close_mouse_button = 'middle'
#+end_src

** How to behave when the close mouse button is pressed on the tab bar.
## Type: String
## Valid values:
##   - new-tab: Open a new tab.
##   - close-current: Close the current tab.
##   - close-last: Close the last tab.
##   - ignore: Don't do anything.
#+begin_src python
# c.tabs.close_mouse_button_on_bar = 'new-tab'
#+end_src

** Scaling factor for favicons in the tab bar. The tab size is unchanged,
## so big favicons also require extra `tabs.padding`.
## Type: Float
#+begin_src python
# c.tabs.favicons.scale = 1.0
#+end_src

** When to show favicons in the tab bar.
## Type: String
## Valid values:
##   - always: Always show favicons.
##   - never: Always hide favicons.
##   - pinned: Show favicons only on pinned tabs.
#+begin_src python
# c.tabs.favicons.show = 'always'
#+end_src

** Maximum stack size to remember for tab switches (-1 for no maximum).
## Type: Int
#+begin_src python
# c.tabs.focus_stack_size = 10
#+end_src

** Padding (in pixels) for tab indicators.
## Type: Padding
#+begin_src python
# c.tabs.indicator.padding = {'top': 2, 'bottom': 2, 'left': 0, 'right': 4}
#+end_src

** Width (in pixels) of the progress indicator (0 to disable).
## Type: Int
#+begin_src python
# c.tabs.indicator.width = 3
#+end_src

** How to behave when the last tab is closed.
## Type: String
## Valid values:
##   - ignore: Don't do anything.
##   - blank: Load a blank page.
##   - startpage: Load the start page.
##   - default-page: Load the default page.
##   - close: Close the window.
#+begin_src python
# c.tabs.last_close = 'ignore'
#+end_src

** Maximum width (in pixels) of tabs (-1 for no maximum). This setting
## only applies when tabs are horizontal. This setting does not apply to
## pinned tabs, unless `tabs.pinned.shrink` is False. This setting may
## not apply properly if max_width is smaller than the minimum size of
## tab contents, or smaller than tabs.min_width.
## Type: Int
#+begin_src python
# c.tabs.max_width = -1
#+end_src

** Minimum width (in pixels) of tabs (-1 for the default minimum size
## behavior). This setting only applies when tabs are horizontal. This
## setting does not apply to pinned tabs, unless `tabs.pinned.shrink` is
## False.
## Type: Int
#+begin_src python
# c.tabs.min_width = -1
#+end_src

** When switching tabs, what input mode is applied.
## Type: String
## Valid values:
##   - persist: Retain the current mode.
##   - restore: Restore previously saved mode.
##   - normal: Always revert to normal mode.
#+begin_src python
# c.tabs.mode_on_change = 'normal'
#+end_src

** Switch between tabs using the mouse wheel.
## Type: Bool
#+begin_src python
# c.tabs.mousewheel_switching = True
#+end_src

** Position of new tabs opened from another tab. See
## `tabs.new_position.stacking` for controlling stacking behavior.
## Type: NewTabPosition
## Valid values:
##   - prev: Before the current tab.
##   - next: After the current tab.
##   - first: At the beginning.
##   - last: At the end.
#+begin_src python
# c.tabs.new_position.related = 'next'
#+end_src

** Stack related tabs on top of each other when opened consecutively.
## Only applies for `next` and `prev` values of
## `tabs.new_position.related` and `tabs.new_position.unrelated`.
## Type: Bool
#+begin_src python
# c.tabs.new_position.stacking = True
#+end_src

** Position of new tabs which are not opened from another tab. See
## `tabs.new_position.stacking` for controlling stacking behavior.
## Type: NewTabPosition
## Valid values:
##   - prev: Before the current tab.
##   - next: After the current tab.
##   - first: At the beginning.
##   - last: At the end.
#+begin_src python
# c.tabs.new_position.unrelated = 'last'
#+end_src

** Padding (in pixels) around text for tabs.
## Type: Padding
#+begin_src python
# c.tabs.padding = {'top': 0, 'bottom': 0, 'left': 5, 'right': 5}
#+end_src

** Force pinned tabs to stay at fixed URL.
## Type: Bool
#+begin_src python
# c.tabs.pinned.frozen = True
#+end_src

** Shrink pinned tabs down to their contents.
## Type: Bool
#+begin_src python
# c.tabs.pinned.shrink = True
#+end_src

** Position of the tab bar.
## Type: Position
## Valid values:
##   - top
##   - bottom
##   - left
##   - right
#+begin_src python
# c.tabs.position = 'top'
#+end_src

** Which tab to select when the focused tab is removed.
## Type: SelectOnRemove
## Valid values:
##   - prev: Select the tab which came before the closed one (left in horizontal, above in vertical).
##   - next: Select the tab which came after the closed one (right in horizontal, below in vertical).
##   - last-used: Select the previously selected tab.
#+begin_src python
# c.tabs.select_on_remove = 'next'
#+end_src

** When to show the tab bar.
## Type: String
## Valid values:
##   - always: Always show the tab bar.
##   - never: Always hide the tab bar.
##   - multiple: Hide the tab bar if only one tab is open.
##   - switching: Show the tab bar when switching tabs.
#+begin_src python
c.tabs.show = 'always'
#+end_src

** Duration (in milliseconds) to show the tab bar before hiding it when
## tabs.show is set to 'switching'.
## Type: Int
#+begin_src python
c.tabs.show_switching_delay = 5000
#+end_src

** Open a new window for every tab.
## Type: Bool
#+begin_src python
# c.tabs.tabs_are_windows = False
#+end_src

** Alignment of the text inside of tabs.
## Type: TextAlignment
## Valid values:
##   - left
##   - right
##   - center
#+begin_src python
# c.tabs.title.alignment = 'left'
#+end_src

** Format to use for the tab title. The following placeholders are
## defined:  * `{perc}`: Percentage as a string like `[10%]`. *
## `{perc_raw}`: Raw percentage, e.g. `10`. * `{current_title}`: Title of
## the current web page. * `{title_sep}`: The string ` - ` if a title is
## set, empty otherwise. * `{index}`: Index of this tab. * `{id}`:
## Internal tab ID of this tab. * `{scroll_pos}`: Page scroll position. *
## `{host}`: Host of the current web page. * `{backend}`: Either
## ''webkit'' or ''webengine'' * `{private}`: Indicates when private mode
## is enabled. * `{current_url}`: URL of the current web page. *
## `{protocol}`: Protocol (http/https/...) of the current web page. *
## `{audio}`: Indicator for audio/mute status.
## Type: FormatString
#+begin_src python
c.tabs.title.format = '{audio}{index}: {current_title} {private}'
#+end_src

** Format to use for the tab title for pinned tabs. The same placeholders
## like for `tabs.title.format` are defined.
## Type: FormatString
#+begin_src python
# c.tabs.title.format_pinned = '{index}'
#+end_src

** Show tooltips on tabs. Note this setting only affects windows opened
## after it has been set.
## Type: Bool
#+begin_src python
# c.tabs.tooltips = True
#+end_src

** Number of close tab actions to remember, per window (-1 for no
## maximum).
## Type: Int
#+begin_src python
# c.tabs.undo_stack_size = 100
#+end_src

** Width (in pixels or as percentage of the window) of the tab bar if
## it's vertical.
## Type: PercOrInt
#+begin_src python
# c.tabs.width = '20%'
#+end_src

** Wrap when changing tabs.
## Type: Bool
#+begin_src python
# c.tabs.wrap = True
#+end_src

* Search Settings
#+begin_src python
# ============================
# Search Settings
# ============================
#+end_src
** What search to start when something else than a URL is entered.
## Type: String
## Valid values:
##   - naive: Use simple/naive check.
##   - dns: Use DNS requests (might be slow!).
##   - never: Never search automatically.
##   - schemeless: Always search automatically unless URL explicitly contains a scheme.
#+begin_src python
# c.url.auto_search = 'naive'
#+end_src

** Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
## for a blank page.
## Type: FuzzyUrl
#+begin_src python
# c.url.default_page = 'https://start.duckduckgo.com/'
#+end_src

** URL segments where `:navigate increment/decrement` will search for a
## number.
## Type: FlagList
## Valid values:
##   - host
##   - port
##   - path
##   - query
##   - anchor
#+begin_src python
# c.url.incdec_segments = ['path', 'query']
#+end_src

** Open base URL of the searchengine if a searchengine shortcut is
## invoked without parameters.
## Type: Bool
#+begin_src python
# c.url.open_base_url = False
#+end_src


** Search engines which can be used via the address bar.  Maps a search
## engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
## placeholder. The placeholder will be replaced by the search term, use
## `{{` and `}}` for literal `{`/`}` braces.  The following further
## placeholds are defined to configure how special characters in the
## search terms are replaced by safe characters (called 'quoting'):  *
## `{}` and `{semiquoted}` quote everything except slashes; this is the
## most   sensible choice for almost all search engines (for the search
## term   `slash/and&amp` this placeholder expands to `slash/and%26amp`).
## * `{quoted}` quotes all characters (for `slash/and&amp` this
## placeholder   expands to `slash%2Fand%26amp`). * `{unquoted}` quotes
## nothing (for `slash/and&amp` this placeholder   expands to
## `slash/and&amp`).  The search engine named `DEFAULT` is used when
## `url.auto_search` is turned on and something else than a URL was
## entered to be opened. Other search engines can be used by prepending
## the search engine name to the search term, e.g. `:open google
## qutebrowser`.
## Type: Dict
#+begin_src python
c.url.searchengines = {
    'DEFAULT': 'https://duckduckgo.com/?q={}',
    'd': 'https://duckduckgo.com/?q={}',
    'g' : 'https://www.google.com/search?q={}',
    'y' : 'https://yandex.com/search/?msid=1600227532.21776.97936.549811&text={}&suggest_reqid=189617456160022753274905091117279',
    'b' : 'https://www.bing.com/search?q={}',
    'id' : 'https://duckduckgo.com/?q={}&iax=images&ia=images',
    'ig' : 'https://www.google.com/search?q={}&tbm=isch&ved=2ahUKEwjuhfWY3-zrAhUlJHIKHYLiCLAQ2-cCegQIABAA&oq=texx&gs_lcp=CgNpbWcQAzIECAAQQzIECAAQQzIECAAQQzIECAAQQzIECAAQQzIECAAQQzIECAAQQzIECAAQQzIECAAQQzIECAAQQzoCCAA6BQgAELEDUO0nWOEvYMg2aABwAHgAgAGHC4gByRSSAQM3LTKYAQCgAQGqAQtnd3Mtd2l6LWltZ8ABAQ&sclient=img&ei=2IdhX-65NqXIyAOCxaOACw&safe=strict',
    'ib' : 'https://www.bing.com/images/search?q={}&form=HDRSC2&first=1&scenario=ImageBasicHover',
    'iy' : 'https://yandex.com/images/search?text={}&from=tabbar',
    'yt' : 'https://www.youtube.com/results?search_query={}',
    'tk' : 'https://www.tokopedia.com/search?st=product&q={}&navsource=home',
    'ar' : 'https://archlinux.org/packages/?q={}',
    }
# c.url.searchengines = {'g' : 'https://www.google.com/search?q={}'}
#+end_src

** Page(s) to open at the start.
## Type: List of FuzzyUrl, or FuzzyUrl
#+begin_src python
c.url.start_pages = ['https://start.duckduckgo.com']
#+end_src

** URL parameters to strip with `:yank url`.
## Type: List of String
#+begin_src python
# c.url.yank_ignored_parameters = ['ref', 'utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content']
#+end_src

** Hide the window decoration.  This setting requires a restart on
## Wayland.
## Type: Bool
#+begin_src python
# c.window.hide_decoration = False
#+end_src

** Format to use for the window title. The same placeholders like for
## `tabs.title.format` are defined.
## Type: FormatString
#+begin_src python
# c.window.title_format = '{perc}{current_title}{title_sep}qutebrowser'
#+end_src

** Default zoom level.
## Type: Perc
#+begin_src python
# c.zoom.default = '100%'
#+end_src

** Available zoom levels.
## Type: List of Perc
#+begin_src python
# c.zoom.levels = ['25%', '33%', '50%', '67%', '75%', '90%', '100%', '110%', '125%', '150%', '175%', '200%', '250%', '300%', '400%', '500%']
#+end_src

** Number of zoom increments to divide the mouse wheel movements to.
## Type: Int
#+begin_src python
# c.zoom.mouse_divider = 512
#+end_src

** Apply the zoom factor on a frame only to the text or to all content.
## Type: Bool
#+begin_src python
# c.zoom.text_only = False
#+end_src

* Key Bindings
#+begin_src python
# ============================
# Key Bindings
# ============================
#+end_src
** Bindings for caret mode
#+begin_src python
# config.bind('$', 'move-to-end-of-line', mode='caret')
# config.bind('0', 'move-to-start-of-line', mode='caret')
# config.bind('<Ctrl-Space>', 'drop-selection', mode='caret')
# config.bind('<Escape>', 'leave-mode', mode='caret')
# config.bind('<Return>', 'yank selection', mode='caret')
# config.bind('<Space>', 'toggle-selection', mode='caret')
# config.bind('G', 'move-to-end-of-document', mode='caret')
# config.bind('H', 'scroll left', mode='caret')
# config.bind('J', 'scroll down', mode='caret')
# config.bind('K', 'scroll up', mode='caret')
# config.bind('L', 'scroll right', mode='caret')
# config.bind('[', 'move-to-start-of-prev-block', mode='caret')
# config.bind(']', 'move-to-start-of-next-block', mode='caret')
# config.bind('b', 'move-to-prev-word', mode='caret')
# config.bind('c', 'enter-mode normal', mode='caret')
# config.bind('e', 'move-to-end-of-word', mode='caret')
# config.bind('gg', 'move-to-start-of-document', mode='caret')
# config.bind('h', 'move-to-prev-char', mode='caret')
# config.bind('j', 'move-to-next-line', mode='caret')
# config.bind('k', 'move-to-prev-line', mode='caret')
# config.bind('l', 'move-to-next-char', mode='caret')
# config.bind('o', 'reverse-selection', mode='caret')
# config.bind('v', 'toggle-selection', mode='caret')
# config.bind('w', 'move-to-next-word', mode='caret')
# config.bind('y', 'yank selection', mode='caret')
# config.bind('{', 'move-to-end-of-prev-block', mode='caret')
# config.bind('}', 'move-to-end-of-next-block', mode='caret')
#+end_src 

** Bindings for command mode
#+begin_src python
config.bind('<Ctrl-k>', 'completion-item-focus prev', mode='command')
config.bind('<Ctrl-j>', 'completion-item-focus next', mode='command')
config.bind('<Ctrl-h>', 'completion-item-focus --history prev', mode='command')
config.bind('<Ctrl-l>', 'completion-item-focus --history next', mode='command')
# config.bind('<Alt-B>', 'rl-backward-word', mode='command')
# config.bind('<Alt-Backspace>', 'rl-backward-kill-word', mode='command')
# config.bind('<Alt-D>', 'rl-kill-word', mode='command')
# config.bind('<Alt-F>', 'rl-forward-word', mode='command')
# config.bind('<Ctrl-?>', 'rl-delete-char', mode='command')
# config.bind('<Ctrl-A>', 'rl-beginning-of-line', mode='command')
# config.bind('<Ctrl-B>', 'rl-backward-char', mode='command')
# config.bind('<Ctrl-C>', 'completion-item-yank', mode='command')
# config.bind('<Ctrl-D>', 'completion-item-del', mode='command')
# config.bind('<Ctrl-E>', 'rl-end-of-line', mode='command')
# config.bind('<Ctrl-F>', 'rl-forward-char', mode='command')
# config.bind('<Ctrl-H>', 'rl-backward-delete-char', mode='command')
# config.bind('<Ctrl-K>', 'rl-kill-line', mode='command')
# config.bind('<Ctrl-N>', 'command-history-next', mode='command')
# config.bind('<Ctrl-P>', 'command-history-prev', mode='command')
# config.bind('<Ctrl-Return>', 'command-accept --rapid', mode='command')
# config.bind('<Ctrl-Shift-C>', 'completion-item-yank --sel', mode='command')
# config.bind('<Ctrl-Shift-Tab>', 'completion-item-focus prev-category', mode='command')
# config.bind('<Ctrl-Tab>', 'completion-item-focus next-category', mode='command')
# config.bind('<Ctrl-U>', 'rl-unix-line-discard', mode='command')
# config.bind('<Ctrl-W>', 'rl-unix-word-rubout', mode='command')
# config.bind('<Ctrl-Y>', 'rl-yank', mode='command')
# config.bind('<Down>', 'completion-item-focus --history next', mode='command')
# config.bind('<Escape>', 'leave-mode', mode='command')
# config.bind('<Return>', 'command-accept', mode='command')
# config.bind('<Shift-Delete>', 'completion-item-del', mode='command')
# config.bind('<Shift-Tab>', 'completion-item-focus prev', mode='command')
# config.bind('<Tab>', 'completion-item-focus next', mode='command')
# config.bind('<Up>', 'completion-item-focus --history prev', mode='command')
#+end_src

** Bindings for hint mode
#+begin_src python
# config.bind('<Ctrl-B>', 'hint all tab-bg', mode='hint')
# config.bind('<Ctrl-F>', 'hint links', mode='hint')
# config.bind('<Ctrl-R>', 'hint --rapid links tab-bg', mode='hint')
# config.bind('<Escape>', 'leave-mode', mode='hint')
# config.bind('<Return>', 'follow-hint', mode='hint')
#+end_src

** Bindings for insert mode
#+begin_src python
# config.bind('<Ctrl-E>', 'open-editor', mode='insert')
# config.bind('<Escape>', 'leave-mode', mode='insert')
# config.bind('<Shift-Ins>', 'insert-text -- {primary}', mode='insert')
#+end_src

** Bindings for passthrough mode
#+begin_src python
# config.bind('<Shift-Escape>', 'leave-mode', mode='passthrough')
#+end_src

** Bindings for prompt mode
#+begin_src python
# config.bind('<Alt-B>', 'rl-backward-word', mode='prompt')
# config.bind('<Alt-Backspace>', 'rl-backward-kill-word', mode='prompt')
# config.bind('<Alt-D>', 'rl-kill-word', mode='prompt')
# config.bind('<Alt-F>', 'rl-forward-word', mode='prompt')
# config.bind('<Alt-Shift-Y>', 'prompt-yank --sel', mode='prompt')
# config.bind('<Alt-Y>', 'prompt-yank', mode='prompt')
# config.bind('<Ctrl-?>', 'rl-delete-char', mode='prompt')
# config.bind('<Ctrl-A>', 'rl-beginning-of-line', mode='prompt')
# config.bind('<Ctrl-B>', 'rl-backward-char', mode='prompt')
# config.bind('<Ctrl-E>', 'rl-end-of-line', mode='prompt')
# config.bind('<Ctrl-F>', 'rl-forward-char', mode='prompt')
# config.bind('<Ctrl-H>', 'rl-backward-delete-char', mode='prompt')
# config.bind('<Ctrl-K>', 'rl-kill-line', mode='prompt')
# config.bind('<Ctrl-P>', 'prompt-open-download --pdfjs', mode='prompt')
# config.bind('<Ctrl-U>', 'rl-unix-line-discard', mode='prompt')
# config.bind('<Ctrl-W>', 'rl-unix-word-rubout', mode='prompt')
# config.bind('<Ctrl-X>', 'prompt-open-download', mode='prompt')
# config.bind('<Ctrl-Y>', 'rl-yank', mode='prompt')
# config.bind('<Down>', 'prompt-item-focus next', mode='prompt')
# config.bind('<Escape>', 'leave-mode', mode='prompt')
# config.bind('<Return>', 'prompt-accept', mode='prompt')
# config.bind('<Shift-Tab>', 'prompt-item-focus prev', mode='prompt')
# config.bind('<Tab>', 'prompt-item-focus next', mode='prompt')
# config.bind('<Up>', 'prompt-item-focus prev', mode='prompt')
#+end_src

** Bindings for register mode
#+begin_src python
# config.bind('<Escape>', 'leave-mode', mode='register')
#+end_src

** Bindings for yesno mode
#+begin_src python
# config.bind('<Alt-Shift-Y>', 'prompt-yank --sel', mode='yesno')
# config.bind('<Alt-Y>', 'prompt-yank', mode='yesno')
# config.bind('<Escape>', 'leave-mode', mode='yesno')
# config.bind('<Return>', 'prompt-accept', mode='yesno')
# config.bind('N', 'prompt-accept --save no', mode='yesno')
# config.bind('Y', 'prompt-accept --save yes', mode='yesno')
# config.bind('n', 'prompt-accept no', mode='yesno')
# config.bind('y', 'prompt-accept yes', mode='yesno')
#+end_src

** Bindings for downloading related action
#+begin_src python
config.bind(";V", "spawn mpv {url}")
config.bind(";v", "hint links spawn mpv {hint-url}")
config.bind(";a", "hint links spawn st -e mpv {hint-url} --no-video")
config.bind(
    "ed",
    "hint links spawn st -e aria2c --dir=/home/tony/Storage/Downloads '{hint-url}'",
)
config.bind(
    "et",
    "hint links spawn st -e aria2c --dir=/home/tony/Storage/Downloads/Torrents --seed-time=0 '{hint-url}'",
)
# config.bind('ev', 'hint links spawn st -e youtube-dl --config-location ~/.config/youtube-dl/config \'{hint-url}\'')
config.bind("ev", "hint links userscript download_youtube_video")
config.bind("ea", "hint links userscript download_youtube_audio")
config.bind("eV", "hint links userscript download_youtube_video_playlist")
config.bind("eA", "hint links userscript download_youtube_audio_playlist")
# config.bind('ea', 'hint links spawn st -e youtube-dl --config-location ~/.config/youtube-dl/music \'{hint-url}\'')
#+end_src
** Bindings for normal mode
#+begin_src python
config.bind(';z', 'hint images download')
config.bind('<Ctrl-Shift-h>', 'tab-move -')
config.bind('<Ctrl-Shift-l>', 'tab-move +')
config.bind('j', 'scroll-px 0 75')
config.bind('k', 'scroll-px 0 -75')
config.bind('h', 'scroll-px -75 0')
config.bind('l', 'scroll-px 75 0')
config.bind('<Ctrl-R>', ':config-source')
config.bind('<Ctrl-U>', 'undo')
config.unbind('D')
config.bind('<Ctrl-Shift-q>', 'tab-close -o')
config.bind('<Ctrl-j>', 'back')
config.bind('<Ctrl-h>', 'tab-prev')
config.bind('<Ctrl-k>', 'forward')
config.bind('u', 'scroll-page 0 -0.5')
config.bind('d', 'scroll-page 0 0.5')
config.bind('<Ctrl-q>', 'tab-close')
config.bind('<Ctrl-l>', 'tab-next')
config.bind('<Ctrl-Shift-O>', 'set-cmd-text -s :open -b')
# config.bind("'", 'enter-mode jump_mark')
# config.bind('+', 'zoom-in')
# config.bind('-', 'zoom-out')
# config.bind('.', 'repeat-command')
# config.bind('/', 'set-cmd-text /')
# config.bind(':', 'set-cmd-text :')
# config.bind(';I', 'hint images tab')
# config.bind(';O', 'hint links fill :open -t -r {hint-url}')
# config.bind(';R', 'hint --rapid links window')
# config.bind(';Y', 'hint links yank-primary')
# config.bind(';b', 'hint all tab-bg')
# config.bind(';d', 'hint links download')
# config.bind(';f', 'hint all tab-fg')
# config.bind(';h', 'hint all hover')
# config.bind(';i', 'hint images')
# config.bind(';o', 'hint links fill :open {hint-url}')
# config.bind(';r', 'hint --rapid links tab-bg')
# config.bind(';t', 'hint inputs')
# config.bind(';y', 'hint links yank')
config.bind('<Ctrl-Shift-f>', 'hint all tab-bg')
# config.bind('<Alt-1>', 'tab-focus 1')
# config.bind('<Alt-2>', 'tab-focus 2')
# config.bind('<Alt-3>', 'tab-focus 3')
# config.bind('<Alt-4>', 'tab-focus 4')
# config.bind('<Alt-5>', 'tab-focus 5')
# config.bind('<Alt-6>', 'tab-focus 6')
# config.bind('<Alt-7>', 'tab-focus 7')
# config.bind('<Alt-8>', 'tab-focus 8')
# config.bind('<Alt-9>', 'tab-focus -1')
# config.bind('<Alt-m>', 'tab-mute')
# config.bind('<Ctrl-A>', 'navigate increment')
# config.bind('<Ctrl-Alt-p>', 'print')
# config.bind('<Ctrl-B>', 'scroll-page 0 -1')
# config.bind('<Ctrl-D>', 'scroll-page 0 0.5')
# config.bind('<Ctrl-F5>', 'reload -f')
# config.bind('<Ctrl-F>', 'scroll-page 0 1')
# config.bind('<Ctrl-N>', 'open -w')
# config.bind('<Ctrl-PgDown>', 'tab-next')
# config.bind('<Ctrl-PgUp>', 'tab-prev')
# config.bind('<Ctrl-Q>', 'quit')
# config.bind('<Ctrl-Return>', 'follow-selected -t')
# config.bind('<Ctrl-Shift-N>', 'open -p')
# config.bind('<Ctrl-Shift-T>', 'undo')
# config.bind('<Ctrl-Shift-Tab>', 'nop')
# config.bind('<Ctrl-Shift-W>', 'close')
# config.bind('<Ctrl-T>', 'open -t')
# config.bind('<Ctrl-Tab>', 'tab-focus last')
# config.bind('<Ctrl-U>', 'scroll-page 0 -0.5')
# config.bind('<Ctrl-V>', 'enter-mode passthrough')
# config.bind('<Ctrl-W>', 'tab-close')
# config.bind('<Ctrl-X>', 'navigate decrement')
# config.bind('<Ctrl-^>', 'tab-focus last')
# config.bind('<Ctrl-h>', 'home')
# config.bind('<Ctrl-p>', 'tab-pin')
# config.bind('<Ctrl-s>', 'stop')
# config.bind('<Escape>', 'clear-keychain ;; search ;; fullscreen --leave')
# config.bind('<F11>', 'fullscreen')
# config.bind('<F5>', 'reload')
# config.bind('<Return>', 'follow-selected')
# config.bind('<back>', 'back')
# config.bind('<forward>', 'forward')
# config.bind('=', 'zoom')
# config.bind('?', 'set-cmd-text ?')
# config.bind('@', 'run-macro')
# config.bind('B', 'set-cmd-text -s :quickmark-load -t')
# config.bind('D', 'tab-close -o')
# config.bind('F', 'hint all tab')
# config.bind('G', 'scroll-to-perc')
# config.bind('H', 'back')
# config.bind('J', 'tab-next')
# config.bind('K', 'tab-prev')
# config.bind('L', 'forward')
# config.bind('M', 'bookmark-add')
# config.bind('N', 'search-prev')
# config.bind('O', 'set-cmd-text -s :open -t')
# config.bind('PP', 'open -t -- {primary}')
# config.bind('Pp', 'open -t -- {clipboard}')
# config.bind('R', 'reload -f')
# config.bind('Sb', 'open qute://bookmarks#bookmarks')
# config.bind('Sh', 'open qute://history')
# config.bind('Sq', 'open qute://bookmarks')
# config.bind('Ss', 'open qute://settings')
# config.bind('T', 'tab-focus')
# config.bind('V', 'enter-mode caret ;; toggle-selection --line')
# config.bind('ZQ', 'quit')
# config.bind('ZZ', 'quit --save')
# config.bind('[[', 'navigate prev')
# config.bind(']]', 'navigate next')
# config.bind('`', 'enter-mode set_mark')
# config.bind('ad', 'download-cancel')
# config.bind('b', 'set-cmd-text -s :quickmark-load')
# config.bind('cd', 'download-clear')
# config.bind('co', 'tab-only')
# config.bind('d', 'tab-close')
# config.bind('<Ctrl-q>', 'tab-close')
# config.bind('f', 'hint')
# config.bind('g$', 'tab-focus -1')
# config.bind('g0', 'tab-focus 1')
# config.bind('gB', 'set-cmd-text -s :bookmark-load -t')
# config.bind('gC', 'tab-clone')
# config.bind('gD', 'tab-give')
# config.bind('gO', 'set-cmd-text :open -t -r {url:pretty}')
# config.bind('gU', 'navigate up -t')
# config.bind('g^', 'tab-focus 1')
# config.bind('ga', 'open -t')
# config.bind('gb', 'set-cmd-text -s :bookmark-load')
# config.bind('gd', 'download')
# config.bind('gf', 'view-source')
# config.bind('gg', 'scroll-to-perc 0')
# config.bind('gi', 'hint inputs --first')
# config.bind('gl', 'tab-move -')
# config.bind('gm', 'tab-move')
# config.bind('go', 'set-cmd-text :open {url:pretty}')
# config.bind('gr', 'tab-move +')
# config.bind('gt', 'set-cmd-text -s :buffer')
# config.bind('gu', 'navigate up')
# config.bind('h', 'scroll left')
# config.bind('i', 'enter-mode insert')
# config.bind('j', 'scroll down')
# config.bind('k', 'scroll up')
# config.bind('l', 'scroll right')
# config.bind('m', 'quickmark-save')
# config.bind('n', 'search-next')
# config.bind('o', 'set-cmd-text -s :open')
# config.bind('pP', 'open -- {primary}')
# config.bind('pp', 'open -- {clipboard}')
# config.bind('q', 'record-macro')
# config.bind('r', 'reload')
# config.bind('sf', 'save')
# config.bind('sk', 'set-cmd-text -s :bind')
# config.bind('sl', 'set-cmd-text -s :set -t')
# config.bind('ss', 'set-cmd-text -s :set')
# config.bind('tCH', 'config-cycle -p -u *://*.{url:host}/* content.cookies.accept all no-3rdparty never ;; reload')
# config.bind('tCh', 'config-cycle -p -u *://{url:host}/* content.cookies.accept all no-3rdparty never ;; reload')
# config.bind('tCu', 'config-cycle -p -u {url} content.cookies.accept all no-3rdparty never ;; reload')
# config.bind('tIH', 'config-cycle -p -u *://*.{url:host}/* content.images ;; reload')
# config.bind('tIh', 'config-cycle -p -u *://{url:host}/* content.images ;; reload')
# config.bind('tIu', 'config-cycle -p -u {url} content.images ;; reload')
# config.bind('tPH', 'config-cycle -p -u *://*.{url:host}/* content.plugins ;; reload')
# config.bind('tPh', 'config-cycle -p -u *://{url:host}/* content.plugins ;; reload')
# config.bind('tPu', 'config-cycle -p -u {url} content.plugins ;; reload')
# config.bind('tSH', 'config-cycle -p -u *://*.{url:host}/* content.javascript.enabled ;; reload')
# config.bind('tSh', 'config-cycle -p -u *://{url:host}/* content.javascript.enabled ;; reload')
# config.bind('tSu', 'config-cycle -p -u {url} content.javascript.enabled ;; reload')
# config.bind('tcH', 'config-cycle -p -t -u *://*.{url:host}/* content.cookies.accept all no-3rdparty never ;; reload')
# config.bind('tch', 'config-cycle -p -t -u *://{url:host}/* content.cookies.accept all no-3rdparty never ;; reload')
# config.bind('tcu', 'config-cycle -p -t -u {url} content.cookies.accept all no-3rdparty never ;; reload')
# config.bind('th', 'back -t')
# config.bind('tiH', 'config-cycle -p -t -u *://*.{url:host}/* content.images ;; reload')
# config.bind('tih', 'config-cycle -p -t -u *://{url:host}/* content.images ;; reload')
# config.bind('tiu', 'config-cycle -p -t -u {url} content.images ;; reload')
# config.bind('tl', 'forward -t')
# config.bind('tpH', 'config-cycle -p -t -u *://*.{url:host}/* content.plugins ;; reload')
# config.bind('tph', 'config-cycle -p -t -u *://{url:host}/* content.plugins ;; reload')
# config.bind('tpu', 'config-cycle -p -t -u {url} content.plugins ;; reload')
# config.bind('tsH', 'config-cycle -p -t -u *://*.{url:host}/* content.javascript.enabled ;; reload')
# config.bind('tsh', 'config-cycle -p -t -u *://{url:host}/* content.javascript.enabled ;; reload')
# config.bind('tsu', 'config-cycle -p -t -u {url} content.javascript.enabled ;; reload')
# config.bind('u', 'undo')
# config.bind('v', 'enter-mode caret')
# config.bind('wB', 'set-cmd-text -s :bookmark-load -w')
# config.bind('wIh', 'devtools left')
# config.bind('wIj', 'devtools bottom')
# config.bind('wIk', 'devtools top')
# config.bind('wIl', 'devtools right')
# config.bind('wIw', 'devtools window')
# config.bind('wO', 'set-cmd-text :open -w {url:pretty}')
# config.bind('wP', 'open -w -- {primary}')
# config.bind('wb', 'set-cmd-text -s :quickmark-load -w')
# config.bind('wf', 'hint all window')
# config.bind('wh', 'back -w')
# config.bind('wi', 'devtools')
# config.bind('wl', 'forward -w')
# config.bind('wo', 'set-cmd-text -s :open -w')
# config.bind('wp', 'open -w -- {clipboard}')
# config.bind('xO', 'set-cmd-text :open -b -r {url:pretty}')
# config.bind('xo', 'set-cmd-text -s :open -b')
# config.bind(';o', 'hint links fill :open {hint-url}')
# config.bind('yD', 'yank domain -s')
# config.bind('yM', 'yank inline [{title}]({url}) -s')
# config.bind('yP', 'yank pretty-url -s')
# config.bind('yT', 'yank title -s')
# config.bind('yY', 'yank -s')
# config.bind('yd', 'yank domain')
# config.bind('ym', 'yank inline [{title}]({url})')
# config.bind('yp', 'yank pretty-url')
# config.bind('yt', 'yank title')
# config.bind('yy', 'yank')
# config.bind('{{', 'navigate prev -t')
# config.bind('}}', 'navigate next -t')
#+end_src
** Bondings for changing css stylings
*** Apprentice 
#+begin_src python
config.bind(',ap', 'config-cycle content.user_stylesheets ~/.config/qutebrowser/solarized-everything-css/css/apprentice/apprentice-all-sites.css ""')
#+end_src
*** Dracula 
#+begin_src python
config.bind(',dr', 'config-cycle content.user_stylesheets ~/.config/qutebrowser/solarized-everything-css/css/darculized/darculized-all-sites.css ""')
#+end_src
*** Apprentice 
#+begin_src python
config.bind(',gr', 'config-cycle content.user_stylesheets ~/.config/qutebrowser/solarized-everything-css/css/gruvbox/gruvbox-all-sites.css ""')
#+end_src
*** Apprentice 
#+begin_src python
config.bind(',sd', 'config-cycle content.user_stylesheets ~/.config/qutebrowser/solarized-everything-css/css/solarized-dark/solarized-dark-all-sites.css ""')
#+end_src
*** Apprentice 
#+begin_src python
config.bind(',sl', 'config-cycle content.user_stylesheets ~/.config/qutebrowser/solarized-everything-css/css/solarized-light/solarized-light-all-sites.css ""')
#+end_src
** Bindings for readline insert mode
*** Shortcuts for cursor navigation in insert mode
#+begin_src python
config.bind("<Ctrl-h>", "fake-key <BackSpace>", "insert")
config.bind("<Ctrl-a>", "fake-key <Home>", "insert")
config.bind("<Ctrl-e>", "fake-key <End>", "insert")
config.bind("<Ctrl-b>", "fake-key <Left>", "insert")
config.bind("<Mod1-b>", "fake-key <Ctrl-Left>", "insert")
config.bind("<Ctrl-f>", "fake-key <Right>", "insert")
config.bind("<Mod1-f>", "fake-key <Ctrl-Right>", "insert")
config.bind("<Ctrl-k>", "fake-key <Up>", "insert")
config.bind("<Ctrl-j>", "fake-key <Down>", "insert")
config.bind("<Mod1-d>", "fake-key <Ctrl-Delete>", "insert")
config.bind("<Ctrl-d>", "fake-key <Delete>", "insert")
config.bind("<Ctrl-w>", "fake-key <Ctrl-Backspace>", "insert")
config.bind("<Ctrl-u>", "fake-key <Shift-Home><Delete>", "insert")
config.bind("<Ctrl-l>", "fake-key <Shift-End><Delete>", "insert")
#+end_src
*** Read config from source
#+begin_src python
config.bind("er", "config-source")
#+end_src



